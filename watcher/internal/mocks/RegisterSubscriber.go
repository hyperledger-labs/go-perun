// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	channel "perun.network/go-perun/channel"

	mock "github.com/stretchr/testify/mock"
)

// RegisterSubscriber is an autogenerated mock type for the RegisterSubscriber type
type RegisterSubscriber struct {
	mock.Mock
}

// Register provides a mock function with given fields: _a0, _a1, _a2
func (_m *RegisterSubscriber) Register(_a0 context.Context, _a1 channel.AdjudicatorReq, _a2 []channel.SignedState) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, channel.AdjudicatorReq, []channel.SignedState) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: _a0, _a1
func (_m *RegisterSubscriber) Subscribe(_a0 context.Context, _a1 [32]byte) (channel.AdjudicatorSubscription, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 channel.AdjudicatorSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte) (channel.AdjudicatorSubscription, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [32]byte) channel.AdjudicatorSubscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(channel.AdjudicatorSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [32]byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRegisterSubscriber creates a new instance of RegisterSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegisterSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegisterSubscriber {
	mock := &RegisterSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
