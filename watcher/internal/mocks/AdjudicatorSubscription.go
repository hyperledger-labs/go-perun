// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	channel "perun.network/go-perun/channel"
)

// AdjudicatorSubscription is an autogenerated mock type for the AdjudicatorSubscription type
type AdjudicatorSubscription struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *AdjudicatorSubscription) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Err provides a mock function with given fields:
func (_m *AdjudicatorSubscription) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *AdjudicatorSubscription) Next() channel.AdjudicatorEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 channel.AdjudicatorEvent
	if rf, ok := ret.Get(0).(func() channel.AdjudicatorEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(channel.AdjudicatorEvent)
		}
	}

	return r0
}

// NewAdjudicatorSubscription creates a new instance of AdjudicatorSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdjudicatorSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdjudicatorSubscription {
	mock := &AdjudicatorSubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
